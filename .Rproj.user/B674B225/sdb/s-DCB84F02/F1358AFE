{
    "contents" : "---\ntitle: \"Reproducible Research: Peer Assessment 1\"\nauthor: \"Erich Donahue\"\ndate: \"10/19/2014\"\noutput: \n  html_document :\n    keep_md: true\n---\n##Loading and preprocessing the data\nPedometer activity data is downloaded from a url and the csv is read into data frame\n\n```{r \"DataPrep\", echo=TRUE} \n# Download and read activity csv\ndownload.file(\"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\", \"activity.zip\", method=\"curl\")\nunzip(\"activity.zip\")\nact <- read.csv(\"activity.csv\")\n```\n\n\n## What is mean total number of steps taken per day?\nTo explore the tendencies of the daily number of steps a histogram of the number of\ndays is plotted, showing the distribution of daily steps. \n\n```{r \"DailySteps-Hist\", echo=TRUE}\n#Create subset of steps summed for each day, aggregate function used to sum over dates\nday_steps <- aggregate(act$steps, by=list(act$date), FUN= sum)\nnames(day_steps) <- c(\"date\", \"total_steps\")\nhist(day_steps$total_steps, xlab=\"Daily Steps\", main = \"Histogram of Steps per Day\", col=\"blue\")\n```\n\n```{r \"DailySteps-MeanMedian\", echo=TRUE}\nmean_steps <-  as.integer(mean(day_steps$total_steps, na.rm=TRUE))\nmedian_steps <- median(day_steps$total_steps, na.rm=TRUE)\n```\n\nThe mean integer of steps per day is `r mean_steps`.\nThe median number of steps in the dataset is `r median_steps`.\n\n\n## What is the average daily activity pattern?\nJudging from the pattern of steps occuring mostly in the early to middle intervals it seems likely that the subject wearing the activity tracker lives a generally diurnal lifestyle.  Given the peak seen in the early intervals we may speculate that a morning routine of exercise is sometimes observed.\n\n```{r \"dailyActivity\", echo=TRUE}\n#Create subset of steps averaged for each interval, aggregate function used \n#to average steps over intervals\ninterval_steps <- aggregate(act$steps, by=list(act$interval), FUN= mean, na.rm=TRUE)\nnames(interval_steps) <- c(\"interval\", \"avg_steps\")\nplot(interval_steps$interval, interval_steps$avg_steps, type=\"l\", col = \"blue\", \n    main = \"Average Steps Over Daily Five Minute Intervals\", xlab=\"Average Steps\", ylab=\"Five Min Interval\")\n```\n\n\nThe following occurence includes the maximum number of steps in the dataset:\n```{r \"maxInterval\", echo=TRUE}\n# Determine which interval has the maximum average number of steps\ninterval_steps[interval_steps$avg_steps == max(interval_steps$avg_steps, na.rm=TRUE),] \n```\n\n\n## Imputing missing values\n###Missing values incidence\n```{r \"ImputeMissing-Count\", echo=TRUE}\n#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)\nmissing <- sum(is.na(act$steps))\ntotal <- length(act$steps)\nmiss_pct <- round((missing/total)*100, digits=2)\n```\nThere are a total of `r missing` (non-zero) step measurements within the dataset.  Out of the total `r total` observations this represents a `r miss_pct`% missing values rate.\n\n\n###Step imputation\nIn order to handle missing values I've taken the simple approach of applying the average number of steps for each interval to any date and interval combination missing data.  While this ignores some known or potential relationships like sleeping hours or weekend behavior shifts this approach the simplicity of implementation makes this approach attractive.\n\n```{r \"ImputeMissing-ApplyIntervalAvg\", echo=TRUE}\n# Devise a strategy for filling in all of the missing values in the dataset. \n# The strategy does not need to be sophisticated. For example, \n# you could use the mean/median for that day, \n# or the mean for that 5-minute interval, etc.\n\n#Fill in missing values using average five minute interval\nact_imp <- merge(act, interval_steps, sort=FALSE)\nact_imp <- act_imp[order(act_imp$date, act_imp$interval, na.last=FALSE),]\nact_imp$imp_steps <- as.integer(with(act_imp,ifelse(is.na(steps),avg_steps,steps)))\n```\n\n\n###Explore imputed step disribution\nTo test the imputed data I've included a histogram of the imputed step frequencies per day.  The overall distribution looks very similar to the initial histogram of the un-imputed dataset.\n```{r \"ImputeMissing-Explore\", echo=TRUE}\nimp_day_steps <- aggregate(act_imp$imp_steps, by=list(act_imp$date), FUN= sum)\nnames(imp_day_steps) <- c(\"date\", \"total_steps\")\nhist(imp_day_steps$total_steps, xlab=\"Daily Steps\", main = \"Histogram of Steps per Day (Imputed)\", col=\"red\")\n\n#Mean and median total steps per day\nmean_impsteps <- as.integer(mean(imp_day_steps$total_steps, na.rm=TRUE))\nmedian_impsteps <- median(imp_day_steps$total_steps, na.rm=TRUE)\n```\nBoth the mean and median imputed number steps of steps per day are higher than the initial data.  A mean of `r mean_impsteps` for the imputed steps is slightly higher than that of the raw data, `r mean_steps`.  The median of the imputed steps, `r median_impsteps` is some `r median_impsteps - median_steps` higher than that of the un-imputed data.\n\n\n## Are there differences in activity patterns between weekdays and weekends?\nTo test for an obvious difference in activity between weekdays and weekends I've added a new variable to the dataset, \"weekend\", this variable is a two level factor with values \"Weekday\" and \"Weekend\".  Similar to the intraday activity analysis above, line charts are plotted containing the number of steps per interval, averaged for each day.  These plots, using the imputed dataset, seperately compare the intraday activity for both the weekday and weekend groups.\n\n```{r \"WeekendActivity\", echo=TRUE}\nlibrary(ggplot2)\n#Create weekend variable to store day type\n act_imp$weekend <- as.factor(ifelse(weekdays(as.Date(act_imp$date)) %in%c(\"Saturday\", \"Sunday\"),\n        \"Weekend\", \"Weekday\"))\nweekday_intervals <- aggregate(act_imp$steps, by=list(act_imp$weekend, act_imp$interval), FUN= mean, na.rm=TRUE)\nnames(weekday_intervals) <- c(\"weekend\",\"interval\", \"avg_steps\")\nwdy <- ggplot(data=weekday_intervals, aes(x=interval, y=avg_steps)) + geom_line() +geom_point()\nwdy + facet_grid(. ~ weekend)\n```\n",
    "created" : 1413743515299.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3063094277",
    "id" : "F1358AFE",
    "lastKnownWriteTime" : 1413751239,
    "path" : "~/Coursera/ReproResearch_PeerAssesment1/PA1_template.Rmd",
    "project_path" : "PA1_template.Rmd",
    "properties" : {
        "tempName" : "Untitled4"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}